class Solution:
    def monotoneIncreasingDigits(self, n: int) -> int:
        """def qq(a):
            
            if len(a)==1:
                return False
            print("checking", a[0],"and" ,a[1])
            if int(a[0])>int(a[1]):
                return True
            return False
        def q(a):
            if len(a)==1:
                return False
            if int(a[0])==int(a[1]):
                return False
            return True
        s=''
        c=False
        t=False
        
        for i in range(0,len(str(n+1))):
            print(str(n)[i])
            if t:
                if str(n)[i]==str(n)[i-1]:
                    continue
                elif str(n)[i]>str(n)[i-1]:

            elif c:
                s=s+'9'
                print("case 1")
            elif qq(str(n)[i:]):
                s=s+str(int(str(n)[i])-1)
                c=True
                print("case 2")
            elif q(str(n)[i:]):
                s=s+str(n)[i]
                print("case 3")
                t=True
                idx=i
            else:
                s=s+str(n)[i]
                print("case 4")
        return int(s)"""

        s=str(n)[::-1]
        if len(s)==1:
            return int(s)
        for i in range(1,len(s)):
            print("step ",i)
            print("comparing", s[i-1] ," and ",s[i])
            if s[i-1]<s[i]:
                s='9'*i+str(int(s[i])-1)+s[i+1:]
                print(s)
        return int(s[::-1])
